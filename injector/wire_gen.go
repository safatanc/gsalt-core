// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"github.com/safatanc/gsalt-core/internal/app/deliveries"
	"github.com/safatanc/gsalt-core/internal/app/middlewares"
	"github.com/safatanc/gsalt-core/internal/app/services"
	"github.com/safatanc/gsalt-core/internal/infrastructures"
)

// Injectors from injector.go:

// InitializeApplication initializes the application with all its dependencies
func InitializeApplication() (*Application, error) {
	healthHandler := deliveries.NewHealthHandler()
	db := infrastructures.NewDatabase()
	validator := infrastructures.NewValidator()
	connectService := services.NewConnectService()
	accountService := services.NewAccountService(db, validator, connectService)
	authMiddleware := middlewares.NewAuthMiddleware(connectService, accountService)
	accountHandler := deliveries.NewAccountHandler(accountService, authMiddleware)
	flipClient := infrastructures.NewFlipClient()
	flipService := services.NewFlipService(flipClient)
	paymentMethodService := services.NewPaymentMethodService(db, validator)
	auditService := services.NewAuditService(db)
	transactionService := services.NewTransactionService(db, validator, accountService, flipService, connectService, paymentMethodService, auditService)
	transactionHandler := deliveries.NewTransactionHandler(transactionService, paymentMethodService, authMiddleware)
	voucherService := services.NewVoucherService(db, validator)
	voucherHandler := deliveries.NewVoucherHandler(voucherService, authMiddleware)
	voucherRedemptionService := services.NewVoucherRedemptionService(db, validator, voucherService, accountService, transactionService)
	voucherRedemptionHandler := deliveries.NewVoucherRedemptionHandler(voucherRedemptionService, authMiddleware)
	client := infrastructures.NewRedisClient()
	string2 := _wireStringValue
	redisRateLimiter := middlewares.NewRedisRateLimiter(client, string2)
	rateLimitMiddleware := middlewares.NewRateLimitMiddleware(redisRateLimiter)
	merchantAPIKeyService := services.NewMerchantAPIKeyService(db)
	apiKeyMiddleware := middlewares.NewAPIKeyMiddleware(merchantAPIKeyService, redisRateLimiter)
	application := &Application{
		HealthHandler:            healthHandler,
		AccountHandler:           accountHandler,
		TransactionHandler:       transactionHandler,
		VoucherHandler:           voucherHandler,
		VoucherRedemptionHandler: voucherRedemptionHandler,
		RateLimitMiddleware:      rateLimitMiddleware,
		APIKeyMiddleware:         apiKeyMiddleware,
	}
	return application, nil
}

var (
	_wireStringValue = "gsalt"
)

// injector.go:

// Application represents the main application container for gsalt-core
type Application struct {
	HealthHandler            *deliveries.HealthHandler
	AccountHandler           *deliveries.AccountHandler
	TransactionHandler       *deliveries.TransactionHandler
	VoucherHandler           *deliveries.VoucherHandler
	VoucherRedemptionHandler *deliveries.VoucherRedemptionHandler
	RateLimitMiddleware      *middlewares.RateLimitMiddleware
	APIKeyMiddleware         *middlewares.APIKeyMiddleware
}

// RegisterRoutes registers all application routes using a Fiber router
func (app *Application) RegisterRoutes(router fiber.Router) {

	router.Use(app.RateLimitMiddleware.LimitByIP(middlewares.PublicAPILimit))

	authGroup := router.Group("/auth")
	authGroup.Use(app.RateLimitMiddleware.LimitByIP(middlewares.AuthLimit))

	protectedGroup := router.Group("")
	protectedGroup.Use(app.RateLimitMiddleware.LimitByUser(middlewares.AuthenticatedAPILimit))

	app.HealthHandler.RegisterRoutes(router)
	app.AccountHandler.RegisterRoutes(router)
	app.TransactionHandler.RegisterRoutes(router)
	app.VoucherHandler.RegisterRoutes(router)
	app.VoucherRedemptionHandler.RegisterRoutes(router)
}

// Infrastructure providers
var infrastructureSet = wire.NewSet(infrastructures.NewDatabase, infrastructures.NewRedisClient, infrastructures.NewValidator, infrastructures.NewFlipClient, wire.Value("gsalt"), wire.Bind(new(middlewares.RateLimiter), new(*middlewares.RedisRateLimiter)), middlewares.NewRedisRateLimiter)

// Service providers
var serviceSet = wire.NewSet(services.NewConnectService, services.NewAccountService, services.NewPaymentMethodService, services.NewFlipService, services.NewTransactionService, services.NewVoucherService, services.NewVoucherRedemptionService, services.NewAuditService, services.NewMerchantAPIKeyService)

// Middleware providers
var middlewareSet = wire.NewSet(middlewares.NewAuthMiddleware, middlewares.NewAPIKeyMiddleware, middlewares.NewRateLimitMiddleware)

// Handler providers
var handlerSet = wire.NewSet(deliveries.NewHealthHandler, deliveries.NewAccountHandler, deliveries.NewTransactionHandler, deliveries.NewVoucherHandler, deliveries.NewVoucherRedemptionHandler, wire.Struct(new(Application), "*"))
